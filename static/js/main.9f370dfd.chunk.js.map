{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","web3","dustContract","dustInfo","treasureContract","treasureInfo","componentDidMount","a","Web3","eth","net","getId","networkId","Contract","NiftMemoryDust","abi","networks","address","methods","name","call","symbol","totalSupply","NiftMemoryTreasure","tokenId","tokenURI","uri","Axios","response","ownerOf","data","owner","push","console","log","setState","alert","error","className","Container","Card","CardTitle","CardText","this","Row","map","e","index","Col","md","key","CardImg","top","src","image","alt","CardBody","CardSubtitle","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAgFeA,E,2MArEXC,MAAQ,CAACC,KAAM,KAAMC,aAAc,KAAMC,SAAU,GAAIC,iBAAkB,KAAMC,aAAc,I,EAE7FC,kB,sBAAoB,4CAAAC,EAAA,sEAGNN,EAAO,IAAIO,IAAK,kDAHV,SAKYP,EAAKQ,IAAIC,IAAIC,QALzB,cAKNC,EALM,OAMNV,EAAe,IAAID,EAAKQ,IAAII,SAASC,EAAeC,IAAKD,EAAeE,SAASJ,GAAWK,SANtF,SASIf,EAAagB,QAAQC,OAAOC,OAThC,oCAUMlB,EAAagB,QAAQG,SAASD,OAVpC,qCAWWlB,EAAagB,QAAQI,cAAcF,OAX9C,oBAQNjB,EARM,CASRgB,KATQ,KAURE,OAVQ,KAWRC,YAXQ,MAcNlB,EAAmB,IAAIH,EAAKQ,IAAII,SAASU,EAAmBR,IAAKQ,EAAmBP,SAASJ,GAAWK,SAE1GZ,EAAe,GACXmB,EAAU,EAjBN,aAiBSA,GAAW,GAjBpB,kCAkBUpB,EAAiBc,QAAQO,SAASD,GAASJ,OAlBrD,eAkBFM,EAlBE,iBAmBeC,IAAMD,GAnBrB,eAmBFE,EAnBE,iBAoBoBxB,EAAiBc,QAAQW,QAAQL,GAASJ,OApB9D,QAoBRQ,EAASE,KAAKC,MApBN,OAqBR1B,EAAa2B,KAAKJ,EAASE,MArBnB,QAiBuBN,IAjBvB,wBAuBZS,QAAQC,IAAI,iBAAkB7B,GAC9B,EAAK8B,SAAS,CAAClC,OAAMC,eAAcC,WAAUC,mBAAkBC,iBAxBnD,kDA2BZ+B,MAAM,mDAGNH,QAAQI,MAAR,MA9BY,0D,wEAmChB,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,cAAiBC,KAAK3C,MAAMG,SAASgB,MACrC,kBAACuB,EAAA,EAAD,gBAAmBC,KAAK3C,MAAMG,SAASkB,QACvC,kBAACqB,EAAA,EAAD,sBAAyBC,KAAK3C,MAAMG,SAASmB,eAGrD,kBAACsB,EAAA,EAAD,KACKD,KAAK3C,MAAMK,aAAawC,KAAI,SAACC,EAAEC,GAAH,OACzB,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,IAAKH,GACb,kBAACP,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAASC,KAAG,EAACC,IAAKP,EAAEQ,MAAOC,IAAKT,EAAE3B,OAClC,kBAACqC,EAAA,EAAD,KACI,kBAACf,EAAA,EAAD,KAAYK,EAAE3B,MACd,kBAACsC,EAAA,EAAD,eAAsBX,EAAEf,OACxB,kBAACW,EAAA,EAAD,KAAWI,EAAEY,yB,GAxD/BC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f370dfd.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport NiftMemoryDust from \"./contracts/NiftMemoryDust.json\";\nimport NiftMemoryTreasure from \"./contracts/NiftMemoryTreasure.json\";\nimport Web3 from \"web3\";\nimport {\n    Card, Button, CardImg, CardTitle, CardText,\n    CardSubtitle, CardBody, Col, Container, Row\n} from 'reactstrap';\nimport Axios from \"axios\";\n\nclass App extends Component {\n    state = {web3: null, dustContract: null, dustInfo: {}, treasureContract: null, treasureInfo: []};\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = new Web3('https://data-seed-prebsc-1-s1.binance.org:8545')\n\n            const networkId = await web3.eth.net.getId()\n            const dustContract = new web3.eth.Contract(NiftMemoryDust.abi, NiftMemoryDust.networks[networkId].address)\n\n            const dustInfo = {\n                name: await dustContract.methods.name().call(),\n                symbol: await dustContract.methods.symbol().call(),\n                totalSupply: await dustContract.methods.totalSupply().call()\n            }\n\n            const treasureContract = new web3.eth.Contract(NiftMemoryTreasure.abi, NiftMemoryTreasure.networks[networkId].address)\n\n            let treasureInfo = []\n            for(let tokenId = 1; tokenId <= 3; tokenId++) {\n                const uri = await treasureContract.methods.tokenURI(tokenId).call()\n                const response = await Axios(uri)\n                response.data.owner = await treasureContract.methods.ownerOf(tokenId).call()\n                treasureInfo.push(response.data)\n            }\n            console.log('treasureInfo: ', treasureInfo)\n            this.setState({web3, dustContract, dustInfo, treasureContract, treasureInfo})\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Container>\n                    <Card>\n                        <CardTitle>Currency</CardTitle>\n                        <CardText>Name: {this.state.dustInfo.name}</CardText>\n                        <CardText>Symbol: {this.state.dustInfo.symbol}</CardText>\n                        <CardText>Total supply: {this.state.dustInfo.totalSupply}</CardText>\n                    </Card>\n                </Container>\n                <Row>\n                    {this.state.treasureInfo.map((e,index) => (\n                        <Col md=\"4\" key={index}>\n                            <Card>\n                                <CardImg top src={e.image} alt={e.name}/>\n                                <CardBody>\n                                    <CardTitle>{e.name}</CardTitle>\n                                    <CardSubtitle>Owner: {e.owner}</CardSubtitle>\n                                    <CardText>{e.description}</CardText>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n\n\n                </Row>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}